name: Build PR Image
on:
  pull_request:
    types: [opened,synchronize,reopened,closed]

jobs:
  build:
    name: Build Metabase ${{ matrix.edition }} @${{ github.event.inputs.commit }}
    runs-on: ubuntu-20.04
    timeout-minutes: 40
    strategy:
      matrix:
        edition: [oss, ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.commit }}
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare back-end environment
      uses: ./.github/actions/prepare-backend
    - name: Build
      run: ./bin/build
    - name: Prepare uberjar artifact
      uses: ./.github/actions/prepare-uberjar-artifact

  check-uberjar-health:
    runs-on: ubuntu-20.04
    name: Is ${{ matrix.edition }} (java ${{ matrix.java-version }}) healthy?
    needs: build
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
        java-version: [11, 17]
    steps:
    - name: Prepare JRE (Java Run-time Environment)
      uses: actions/setup-java@v3
      with:
        java-package: jre
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - run: java -version
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Launch uberjar (and keep it running)
      run: java -jar ./target/uberjar/metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done

  containerize:
    runs-on: ubuntu-20.04
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    needs: check-uberjar-health
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - name: Set the image tag based on the edition
      run: |
        if [[ ${{ matrix.edition }} == ee ]]; then
          echo "IMAGE_TAG=${{ github.event.inputs.ee-tag }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=${{ github.event.inputs.oss-tag }}" >> $GITHUB_ENV
        fi
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.commit }}
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Move the Uberjar to the context dir
      run: mv ./target/uberjar/metabase.jar bin/docker/.
    - name: Generate UUID image name
      id: uuid
      run: echo "UUID_WORKER=$(uuidgen)" >> $GITHUB_ENV
    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: registry.uffizzi.com/${{ env.UUID_WORKER }}
        tags: |
            type=raw,value=60d
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver-opts: network=host
    - name: Build and Push Image to registry.uffizzi.com - Uffizzi's ephemeral Registry
      uses: docker/build-push-action@v3
      with:
          context: bin/docker/.
          network: host
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  render-compose-file:
    name: Render Docker Compose File
    # Pass output of this workflow to another triggered by `workflow_run` event
    runs-on: ubuntu-latest
    needs:
      - containerize
    outputs:
      compose-file-cache-key: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          METABASE_IMAGE=$(echo ${{ needs.containerize.outputs.tags }})
          export METABASE_IMAGE
          # Render simple template from environment variables.
          envsubst < docker-compose.uffizzi.yml > docker-compose.rendered.yml
          cat docker-compose.rendered.yml
      - name: Upload Rendered Compose File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: docker-compose.rendered.yml
          retention-days: 2
      - name: Serialize PR Event to File
        run:  |
          cat << EOF > event.json
          ${{ toJSON(github.event) }}

          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2

  delete-preview:
    name: Call for Preview Deletion
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' }}
    steps:
      # If this PR is closing, we will not render a compose file nor pass it to the next workflow.
      - name: Serialize PR Event to File
        run:  |
          cat << EOF > event.json
          ${{ toJSON(github.event) }}

          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2